#!/bin/bash

# Automated Security Setup Script
# Usage: ./setup-security.sh [ssh_port] [ssh_user]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    print_error "This script should not be run as root. Please run as a regular user with sudo privileges."
    exit 1
fi

# Get parameters
SSH_PORT=${1:-22}
SSH_USER=${2:-$(whoami)}

print_info "Setting up security for user: $SSH_USER, SSH port: $SSH_PORT"

# Check if SSH key exists
if [[ ! -f ~/.ssh/id_ed25519.pub && ! -f ~/.ssh/id_rsa.pub ]]; then
    print_warning "No SSH key found. Please generate one first:"
    echo "ssh-keygen -t ed25519 -C \"your-email@example.com\""
    exit 1
fi

# Detect SSH key type
if [[ -f ~/.ssh/id_ed25519.pub ]]; then
    SSH_KEY_FILE=~/.ssh/id_ed25519.pub
    SSH_KEY_TYPE="ed25519"
elif [[ -f ~/.ssh/id_rsa.pub ]]; then
    SSH_KEY_FILE=~/.ssh/id_rsa.pub
    SSH_KEY_TYPE="rsa"
fi

print_info "Using SSH key: $SSH_KEY_FILE"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Update system
print_info "Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install required packages
print_info "Installing security packages..."
sudo apt install -y ufw fail2ban unattended-upgrades

# Configure UFW firewall
print_info "Configuring UFW firewall..."
sudo ufw --force reset
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow $SSH_PORT/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

# Note: Do NOT open internal service ports (8080, 9090, 3000) when using Traefik
# Traefik handles all external access through ports 80 and 443
print_info "Firewall configured for Traefik reverse proxy"
print_info "Internal service ports (8080, 9090, 3000) are NOT opened externally"
print_info "All services will be accessible through HTTPS (port 443) via Traefik"

sudo ufw --force enable

print_success "Firewall configured successfully"

# Configure SSH
print_info "Configuring SSH..."

# Backup original SSH config
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)

# Create new SSH config
sudo tee /etc/ssh/sshd_config > /dev/null << EOF
# SSH Configuration - Generated by setup-security.sh
Port $SSH_PORT
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Authentication
LoginGraceTime 30
PermitRootLogin no
MaxAuthTries 3
MaxSessions 10
PasswordAuthentication no
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Security
X11Forwarding no
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
UsePrivilegeSeparation yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UseDNS no

# Logging
SyslogFacility AUTH
LogLevel INFO

# Subsystem
Subsystem sftp /usr/lib/openssh/sftp-server
EOF

# Test SSH configuration
print_info "Testing SSH configuration..."
if sudo sshd -t; then
    print_success "SSH configuration is valid"
else
    print_error "SSH configuration is invalid. Restoring backup..."
    sudo cp /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S) /etc/ssh/sshd_config
    exit 1
fi

# Configure Fail2Ban
print_info "Configuring Fail2Ban..."
sudo tee /etc/fail2ban/jail.local > /dev/null << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
backend = systemd

[sshd]
enabled = true
port = $SSH_PORT
logpath = /var/log/auth.log
maxretry = 3
EOF

# Start and enable services
print_info "Starting security services..."
sudo systemctl enable fail2ban
sudo systemctl start fail2ban
sudo systemctl restart sshd

print_success "Security services started"

# Configure automatic updates
print_info "Configuring automatic security updates..."
sudo dpkg-reconfigure -f noninteractive unattended-upgrades

# Create unattended-upgrades configuration
sudo tee /etc/apt/apt.conf.d/50unattended-upgrades > /dev/null << EOF
Unattended-Upgrade::Allowed-Origins {
    "\${distro_id}:\${distro_codename}-security";
    "\${distro_id}ESMApps:\${distro_codename}-apps-security";
    "\${distro_id}ESM:\${distro_codename}-infra-security";
};

Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
Unattended-Upgrade::Automatic-Reboot-Time "02:00";
EOF

# Disable unnecessary services
print_info "Disabling unnecessary services..."
sudo systemctl disable bluetooth 2>/dev/null || true
sudo systemctl disable cups 2>/dev/null || true
sudo systemctl disable avahi-daemon 2>/dev/null || true
sudo systemctl disable snapd 2>/dev/null || true

# Set up log monitoring
print_info "Setting up log monitoring..."
sudo tee /etc/logrotate.d/security > /dev/null << EOF
/var/log/auth.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 640 root adm
}

/var/log/syslog {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 640 root adm
}
EOF

# Create security monitoring script
print_info "Creating security monitoring script..."
sudo tee /usr/local/bin/security-check > /dev/null << 'EOF'
#!/bin/bash
# Security monitoring script

echo "=== Security Status Check ==="
echo "Date: $(date)"
echo

echo "=== SSH Status ==="
systemctl is-active sshd
echo

echo "=== Firewall Status ==="
ufw status
echo

echo "=== Fail2Ban Status ==="
fail2ban-client status
echo

echo "=== Recent SSH Logins ==="
grep "Accepted" /var/log/auth.log | tail -5
echo

echo "=== Failed SSH Attempts ==="
grep "Failed password" /var/log/auth.log | tail -5
echo

echo "=== System Updates ==="
apt list --upgradable 2>/dev/null | wc -l
echo "packages can be updated"
EOF

sudo chmod +x /usr/local/bin/security-check

# Create cron job for security checks
print_info "Setting up security monitoring cron job..."
(crontab -l 2>/dev/null; echo "0 6 * * * /usr/local/bin/security-check >> /var/log/security-check.log 2>&1") | crontab -

# Final status check
print_info "Performing final security check..."
sleep 2

echo
print_success "Security setup completed successfully!"
echo
echo "=== Security Summary ==="
echo "SSH Port: $SSH_PORT"
echo "SSH User: $SSH_USER"
echo "SSH Key: $SSH_KEY_TYPE"
echo "Firewall: Enabled (UFW)"
echo "Fail2Ban: Enabled"
echo "Auto Updates: Enabled"
echo "Monitoring: Enabled"
echo

print_warning "IMPORTANT SECURITY NOTES:"
echo "1. SSH is now configured on port $SSH_PORT"
echo "2. Password authentication is disabled"
echo "3. Root login is disabled"
echo "4. Firewall is active and blocking unnecessary ports"
echo "5. Fail2Ban is monitoring for brute force attacks"
echo "6. Automatic security updates are enabled"
echo

print_warning "NEXT STEPS:"
echo "1. Test SSH connection: ssh -p $SSH_PORT $SSH_USER@$(hostname -I | awk '{print $1}')"
echo "2. Run security check: sudo /usr/local/bin/security-check"
echo "3. Monitor logs: sudo tail -f /var/log/auth.log"
echo "4. Check Fail2Ban: sudo fail2ban-client status"
echo

print_info "Security setup completed! Your server is now more secure."
